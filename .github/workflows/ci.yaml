name: "Ansible and Terraform Workflow"

on:
  push:
    branches:
      - main
    # paths:
    #   - ansible/**
    #   - terraform/**
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - terraform/**

permissions: write-all

env:
  TF_LOG: INFO

jobs:
  ansible:
    name: "Ansible Validation, Scanning and Deployment"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./ansible

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: ZeroTier - Proxmox
        uses: jakoberpf/github-action-zerotier@main # zerotier/github-action@v1.0.1
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID_PROXMOX }}
          auth_token: ${{ secrets.ZEROTIER_CENTRAL_TOKEN }}
          api_url: ${{ secrets.ZEROTIER_API_URL }}

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi

      # - name: Run ansible-lint
      #   uses: ansible-community/ansible-lint-action@v6.0.2
      #   with:
      #     args: "ansible"

      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: plays/main.yml
          directory: ./ansible
          key: ${{secrets.SSH_PRIVATE_KEY}}
          inventory: |
            [all]
            glacier   ansible_host=172.30.119.142  ansible_user=root
            compute-1 ansible_host=172.30.119.190 ansible_user=root
            compute-2 ansible_host=172.30.119.87  ansible_user=root
            compute-3 ansible_host=172.30.119.79  ansible_user=root
            
            [compute]
            compute-1
            compute-2
            compute-3
            
            [storage]
            glacier
          # Optional, SSH known hosts file content
          # known_hosts: |
          #   example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
          # Optional, encrypted vault password
          vault_password: ${{secrets.ANSIBLE_VAULT_PASSWORD}}
          # Optional, galaxy requirements filepath
          # requirements: galaxy-requirements.yml
          # Optional, additional flags to pass to ansible-playbook
          # options: |
          #   --inventory .hosts
          #   --limit group1
          #   --extra-vars hello=there
          #   --verbose

  # terraform:
  #   name: "Terraform Testing, Validation, Scanning and Deployment"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./terraform

  #   steps:
  #     - name: Checkout the repository to the runner
  #       uses: actions/checkout@v3

  #     - name: Set up Python 3.8
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8

  #     - name: Setup Terraform with specified version on the runner
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.3.0

  #     - name: Setup SOPS with binary installer
  #       uses: mdgreenwald/mozilla-sops-action@v1.4.1

  #     - name: Decrypt Terraform backend configuration with SOPS
  #       run: sops --decrypt backend.conf.enc > backend.conf
  #       env:
  #         SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}

  #     - name: Configure aws credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: arn:aws:iam::433082585283:role/github-oidc-terraform
  #         role-session-name: proxmox-cluster-pineapple
  #         aws-region: "eu-central-1" # ${{ env.AWS_REGION }}

  #     - name: Terraform init
  #       id: init
  #       run: terraform init -backend-config=backend.conf

  #     - name: Terraform format
  #       id: fmt
  #       run: terraform fmt -check

  #     - name: Terraform validate
  #       id: validate
  #       run: terraform validate

  #     - name: Terraform scanning with checkov
  #       uses: bridgecrewio/checkov-action@master
  #       with:
  #         directory: ./terraform
  #         framework: terraform

  #     - name: Terraform plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color -input=false
  #       continue-on-error: true

  #     - uses: actions/github-script@v6
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

  #           <details><summary>Show Plan</summary>

  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           \`\`\`

  #           </details>
  #           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #       run: terraform apply -auto-approve -input=false
